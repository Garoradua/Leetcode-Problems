/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int preIndex =0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int inEnd = preorder.length;
        TreeNode curr = buildTreeHelper(preorder, inorder, 0, inEnd-1 );
        return curr;
    }
    public TreeNode buildTreeHelper(int[] preorder, int[] inorder, int inStart, int inEnd){
        if(inStart > inEnd){
            return null;
        }    
        TreeNode root = new TreeNode(preorder[preIndex++]);
        int inIndex = 0;
        for(int i=0; i<=inEnd; i++){
            if(inorder[i]==root.val){
                inIndex = i;
            }
        }
        root.left = buildTreeHelper(preorder, inorder, inStart, inIndex-1);
        root.right = buildTreeHelper(preorder, inorder, inIndex+1, inEnd);
        return root;
    }
}