/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return(BinaryTreeCreater(nums, 0, nums.length-1));
        // return node;
    }
    public TreeNode BinaryTreeCreater(int[] nums, int start, int end){
        if(start>end) return null;
        int maximum = nums[start];
        int result = start;
        for(int i=start; i<=end; i++){
            if(maximum < nums[i]){
                result = i;
                maximum = nums[i];
            }
        }
        TreeNode root = new TreeNode(maximum);
        root.left = BinaryTreeCreater(nums, start, result-1);
        root.right = BinaryTreeCreater(nums, result+1, end);

        return root;
    }
}
