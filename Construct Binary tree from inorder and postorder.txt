/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int size = inorder.length;
        int[] postIndex = {size-1}; 
        TreeNode curr = buildTreeHelper(inorder, postorder, 0, size-1, postIndex);
        return curr;
    }
    public static TreeNode buildTreeHelper(int[] inorder, int[] postorder, int inStart, int inEnd, int[] postIndex){
        if(inStart > inEnd) return null;
        TreeNode root = new TreeNode(postorder[postIndex[0]]);
        postIndex[0]--;
        int inIndex = 0;
        for(int i=inStart; i<=inEnd; i++){
            if(inorder[i]==root.val){
                inIndex = i;
                }
            }
        root.right = buildTreeHelper(inorder, postorder, inIndex+1, inEnd, postIndex);
        root.left = buildTreeHelper(inorder, postorder, inStart, inIndex-1, postIndex);
        return root;
}
}